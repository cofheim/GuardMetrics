using Telegram.Bot;

namespace GuardMetrics.Services;

public class TelegramNotificationService
{
    private readonly ITelegramBotClient _botClient;
    private readonly string _chatId;
    private readonly ILogger<TelegramNotificationService> _logger;

    public TelegramNotificationService(IConfiguration configuration, ILogger<TelegramNotificationService> logger)
    {
        var botToken = configuration["Telegram:BotToken"] ?? throw new ArgumentNullException("Telegram bot token is not configured");
        _chatId = configuration["Telegram:ChatId"] ?? throw new ArgumentNullException("Telegram chat ID is not configured");
        _botClient = new TelegramBotClient(botToken);
        _logger = logger;
    }

    public async Task SendThreatAlertAsync(string processName, string threatType, double severity, string recommendation)
    {
        try
        {
            var message = $"üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞!*\n\n" +
                         $"*–ü—Ä–æ—Ü–µ—Å—Å:* `{processName}`\n" +
                         $"*–¢–∏–ø —É–≥—Ä–æ–∑—ã:* {threatType}\n" +
                         $"*–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:* {severity:P0}\n\n" +
                         $"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{recommendation}";

            await _botClient.SendTextMessageAsync(
                chatId: _chatId,
                text: message,
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown);

            _logger.LogInformation("Sent threat alert to Telegram for process: {ProcessName}", processName);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error sending Telegram notification for process: {ProcessName}", processName);
        }
    }

    public async Task SendAnomalyAlertAsync(string metricType, string details, double anomalyScore)
    {
        try
        {
            var message = $"‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è!*\n\n" +
                         $"*–¢–∏–ø –º–µ—Ç—Ä–∏–∫–∏:* {metricType}\n" +
                         $"*–î–µ—Ç–∞–ª–∏:* {details}\n" +
                         $"*–û—Ü–µ–Ω–∫–∞ –∞–Ω–æ–º–∞–ª–∏–∏:* {anomalyScore:P0}";

            await _botClient.SendTextMessageAsync(
                chatId: _chatId,
                text: message,
                parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown);

            _logger.LogInformation("Sent anomaly alert to Telegram: {Details}", details);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error sending Telegram notification for anomaly: {Details}", details);
        }
    }
} 